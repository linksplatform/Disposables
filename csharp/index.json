{
  "README.html": {
    "href": "README.html",
    "title": "Disposables (русская версия) | LinksPlatform's Platform.Disposables Library",
    "keywords": "Disposables ( русская версия ) This library helps to make objects disposable in a fast, short, easy and safe way. Platform.Disposables.DisposableBase abstract class tries to dispose the object at both on instance destruction and OnProcessExit whatever comes first even if Dispose method was not called anywhere by user. And takes care your disposal logic executes only once by default, and if you really need it, you can allow multiple calls and attempts to dispose, by overriding corresponding properties. The Platform.Disposables.IDisposable interface extends the System.IDisposable with IsDisposed property and Destruct method. The Destruct method is designed to never throw exceptions, that makes it safe to use in class destructors. All ignored exceptions are available at Platform.Disposables.IgnoredDisposables if you need to debug them. Namespace: Platform.Disposables Forked from: Konard/LinksPlatform/Platform/Platform.Helpers/Disposables Package at NuGet: Platform.Disposables Examples If you can use inheritance in your class. For example if you don't have other base class inherited. using Platform.Disposables; namespace Examples { public class DisposableBaseUsageExample : DisposableBase { protected override void Dispose(bool manual, bool wasDisposed) { // Dispose logic } } } If you cannot use inheritance in your class. For example if you have other base class inherited. using Platform.Disposables; namespace Examples { public class DisposableUsageExample : System.IDisposable { private readonly Disposable _disposable; public DisposableUsageExample() => _disposable = new Disposable(Disposed); public void Dispose() => _disposable.Dispose(); ~DisposableUsageExample() => _disposable.Destruct(); private void Disposed(bool manual, bool wasDisposed) { // Dispose logic } } } If you do not have access to the internal structure of the object's class. You can use a disposable object container. The container is convertible back to the passed object at any time. using Platform.Disposables; namespace Examples { public class Examples { public static void UseAndDispose() { var array = new int[] { 1, 2, 3 }; Disposable<int[]> disposableArray = (array, () => array = null); WorkWithObjectAndDispose(disposableArray); // Here array == null } private static void WorkWithObjectAndDispose(Disposable<int[]> disposableArray) { using (disposableArray) { int[] array = disposableArray; // Use your object here } // Here there is call to () => array = null } } } Documentation Interface IDisposable . Abstract class DisposableBase . Class Disposable . Class Disposable<T> . PDF file with code for e-readers. Depend on Platform.Disposables Dependent libraries Platform.Collections"
  },
  "README.ru.html": {
    "href": "README.ru.html",
    "title": "Disposables (english version) | LinksPlatform's Platform.Disposables Library",
    "keywords": "Disposables ( english version ) Эта библиотека помогает сделать объекты высвобождаемыми быстрым, коротким, простым и безопасным способом. Абстрактный класс Platform.Disposables.DisposableBase пытается удалить объект, даже если метод Dispose нигде не вызывался пользователем, любо при вызове деструктора экземпляра, либо при возникновении события OnProcessExit , в зависимости от того, что произойдет раньше. И позаботится о том, чтобы логика удаления по умолчанию выполнялась только один раз, но, если она вам действительно нужна, вы можете разрешить несколько вызовов и попыток удаления, переопределив соответствующие свойства. Интерфейс Platform.Disposables.IDisposable расширяет System.IDisposable добавляя свойство IsDisposed и метод Destruct . Метод Destruct предназначен для того, чтобы не генерировать исключения, что делает его безопасным для использования в деструкторах классов. Все игнорируемые исключения доступны в Platform.Disposables.IgnoredDisposables , если вам нужно их отладить. Пространство имён: Platform.Disposables Ответвление от: Konard/LinksPlatform/Platform/Platform.Helpers/Disposables Пакет в NuGet: Platform.Disposables Примеры Если вы можете использовать наследование в вашем классе. Например, если у вас нет другого наследуемого базового класса. using Platform.Disposables; namespace Examples { public class DisposableBaseUsageExample : DisposableBase { protected override void Dispose(bool manual, bool wasDisposed) { // Логика высвобождения } } } Если вы не можете использовать наследование в вашем классе. Например, если у вас есть другой базовый класс от которого унаследован ваш класс. using Platform.Disposables; namespace Examples { public class DisposableUsageExample : System.IDisposable { private readonly Disposable _disposable; public DisposableUsageExample() => _disposable = new Disposable(Disposed); public void Dispose() => _disposable.Dispose(); ~DisposableUsageExample() => _disposable.Destruct(); private void Disposed(bool manual, bool wasDisposed) { // Логика высвобождения } } } Если у вас нет доступа к внутренней структуре класса объекта. Вы можете использовать высвобождаемый контейнер для вашего объекта. Контейнер может быть преобразован обратно в переданный объект в любое время. using Platform.Disposables; namespace Examples { public class Examples { public static void UseAndDispose() { var array = new int[] { 1, 2, 3 }; Disposable<int[]> disposableArray = (array, () => array = null); WorkWithObjectAndDispose(disposableArray); // Здесь array == null } private static void WorkWithObjectAndDispose(Disposable<int[]> disposableArray) { using (disposableArray) { int[] array = disposableArray; // Используйте ваш объект здесь } // Здесь вызывается () => array = null } } } Документация Интерфейс IDisposable . Абстрактный класс DisposableBase . Класс Disposable . Класс Disposable<T> . PDF файл с кодом для электронных книг. Зависит от Platform.Disposables Зависимые библиотеки Platform.Collections"
  }
}